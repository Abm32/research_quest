rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Administrator';
    }

    // User profiles
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isAdmin();
    }

    // User Topics
    match /userTopics/{topicId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }

    // Research Tasks
    match /researchTasks/{taskId} {
      allow read: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }

    // User Interactions
    match /userInteractions/{interactionId} {
      allow read: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }

    // Resources
    match /resources/{resourceId} {
      allow read: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && (
        resource.data.userId == request.auth.uid || 
        isAdmin() ||
        // Allow updating only specific fields for non-owners (e.g., download count)
        (request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['downloadCount', 'rating', 'reviewCount', 'updatedAt']))
      );
      allow delete: if isSignedIn() && (
        resource.data.userId == request.auth.uid || 
        isAdmin()
      );
    }

    // Saved Resources
    match /saved_resources/{savedId} {
      allow read: if isSignedIn() && isOwner(resource.data.userId);
      allow create: if isSignedIn() && isOwner(request.resource.data.userId);
      allow delete: if isSignedIn() && isOwner(resource.data.userId);
    }

    // Research projects
    match /research_projects/{projectId} {
      allow read: if isSignedIn() && (
        resource.data.userId == request.auth.uid || 
        resource.data.collaborators.hasAny([request.auth.uid])
      );
      allow create: if isSignedIn();
      allow update: if isSignedIn() && (
        resource.data.userId == request.auth.uid || 
        resource.data.collaborators.hasAny([request.auth.uid])
      );
      allow delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }
    
    // Tasks
    match /tasks/{taskId} {
      allow read: if isSignedIn() && exists(/databases/$(database)/documents/research_projects/$(resource.data.projectId)) && (
        get(/databases/$(database)/documents/research_projects/$(resource.data.projectId)).data.userId == request.auth.uid ||
        get(/databases/$(database)/documents/research_projects/$(resource.data.projectId)).data.collaborators.hasAny([request.auth.uid])
      );
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() && (
        resource.data.assignedTo == request.auth.uid ||
        exists(/databases/$(database)/documents/research_projects/$(resource.data.projectId)) && 
        get(/databases/$(database)/documents/research_projects/$(resource.data.projectId)).data.userId == request.auth.uid
      );
    }

    // Communities
    match /communities/{communityId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && (
        (resource.data.created_by == request.auth.uid) ||
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['members', 'member_count', 'updatedAt']))
      );
      allow delete: if isSignedIn() && resource.data.created_by == request.auth.uid;
    }

    // Community messages
    match /community_messages/{messageId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }

    // Points and achievements
    match /points/{userId} {
      allow read: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && (isOwner(userId) || isAdmin());
    }
    
    // Rewards
    match /rewards/{rewardId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }

    // User achievements
    match /achievements/{achievementId} {
      allow read: if isSignedIn();
      allow create, update: if isAdmin();
      allow delete: if false;
    }

    // NEW - User-specific achievements
    match /user_achievements/{achievementId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.user_id == request.auth.uid;
      allow update: if isSignedIn() && resource.data.user_id == request.auth.uid;
      allow delete: if isAdmin();
    }

    // NEW - User activity tracking
    match /user_activities/{activityId} {
      allow read: if isSignedIn() && resource.data.user_id == request.auth.uid;
      allow create: if isSignedIn() && request.resource.data.user_id == request.auth.uid;
      allow update: if isSignedIn() && resource.data.user_id == request.auth.uid;
      allow delete: if isAdmin();
    }

    // NEW - User badges
    match /user_badges/{badgeId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.user_id == request.auth.uid;
      allow update: if isSignedIn() && (
        resource.data.user_id == request.auth.uid || 
        isAdmin()
      );
      allow delete: if isAdmin();
    }

    // Platform integrations
    match /discord_joins/{joinId} {
      allow read, write: if isSignedIn();
    }

    match /slack_joins/{joinId} {
      allow read, write: if isSignedIn();
    }

    match /reddit_subscriptions/{subId} {
      allow read, write: if isSignedIn();
    }
    
    // NEW - Publications
    match /publications/{publicationId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.author_id == request.auth.uid;
      allow update: if isSignedIn() && (
        resource.data.author_id == request.auth.uid || 
        isAdmin()
      );
      allow delete: if isSignedIn() && (
        resource.data.author_id == request.auth.uid || 
        isAdmin()
      );
    }
  }
}